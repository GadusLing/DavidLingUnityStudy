using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Formats.Asn1.AsnWriter;

namespace 俄罗斯方块.Main
{
    /// <summary>
    /// 场景类型枚举 - 定义游戏中所有可能的场景
    /// 用于场景切换时的类型标识
    /// </summary>
    enum E_SceneType
    {
        Start,    // 开始场景 - 游戏主菜单
        Game,     // 游戏场景 - 实际游戏进行中
        Credits,  // 制作人员场景 - 显示开发者信息
        End,      // 结束场景 - 游戏结束后的界面
    }

    /// <summary>
    /// 游戏核心控制器类 - 负责整个游戏的生命周期管理
    /// 职责：
    /// 1. 控制台环境初始化
    /// 2. 场景管理和切换
    /// 3. 游戏主循环控制
    /// 设计模式：单例模式（通过静态成员实现）
    /// </summary>
    internal class Game
    {
        #region 常量定义
        /// <summary>
        /// 全局窗口宽度 - 控制台窗口的字符宽度
        /// </summary>
        public const int GlobalWidth = 50;
        
        /// <summary>
        /// 全局窗口高度 - 控制台窗口的字符高度
        /// </summary>
        public const int GlobalHeight = 20;
        #endregion

        #region 私有字段
        /// <summary>
        /// 当前活动场景 - 存储当前正在运行的场景实例
        /// 使用接口类型实现多态，可以指向任何实现了ISceneUpdate的场景
        /// </summary>
        private static ISceneUpdate nowScene;
        #endregion

        #region 公共方法
        /// <summary>
        /// 初始化控制台环境
        /// 设置窗口大小、缓冲区大小、光标可见性等
        /// 并启动到开始场景
        /// </summary>
        public void InitialConsole()
        {
            // 设置控制台窗口大小，确保显示效果一致
            Console.SetWindowSize(GlobalWidth, GlobalHeight);
            Console.SetBufferSize(GlobalWidth, GlobalHeight);
            
            // 隐藏光标，提升视觉体验
            Console.CursorVisible = false;
            
            // 初始化到开始场景
            ChangeScene(E_SceneType.Start);
        }

        /// <summary>
        /// 启动游戏主循环
        /// 1. 初始化控制台环境
        /// 2. 开始无限循环，持续更新当前场景
        /// </summary>
        public void Start()
        {
            InitialConsole();

            // 游戏主循环 - 每帧调用当前场景的Update方法
            // 使用?.操作符防止空引用异常
            while (true)
            {
                nowScene?.Update();
            }
        }
        #endregion

        #region 场景管理
        /// <summary>
        /// 场景切换公共接口
        /// 先清空控制台内容，再切换到指定场景
        /// </summary>
        /// <param name="sceneType">要切换到的场景类型</param>
        public static void ChangeScene(E_SceneType sceneType)
        {
            // 清除之前场景的显示内容，避免残留
            Console.Clear();
            
            // 执行实际的场景切换逻辑
            SwitchScene(sceneType);
        }

        /// <summary>
        /// 场景切换的具体实现
        /// 根据场景类型创建对应的场景实例
        /// 使用工厂方法模式创建不同类型的场景对象
        /// </summary>
        /// <param name="sceneType">场景类型枚举</param>
        private static void SwitchScene(E_SceneType sceneType)
        {
            // 工厂方法模式 - 根据类型创建对应的场景实例
            switch (sceneType)
            { 
                case E_SceneType.Start:
                    nowScene = new S_StartScene();    // 创建开始场景
                    break;
                case E_SceneType.Game:
                    nowScene = new GameScene();     // 创建游戏场景
                    break;
                case E_SceneType.Credits:
                    nowScene = new S_CreditsScene();  // 创建制作人员场景
                    break;
                case E_SceneType.End:
                    nowScene = new S_EndScene();      // 创建结束场景
                    break;
            }
        }
        #endregion
    }
}
