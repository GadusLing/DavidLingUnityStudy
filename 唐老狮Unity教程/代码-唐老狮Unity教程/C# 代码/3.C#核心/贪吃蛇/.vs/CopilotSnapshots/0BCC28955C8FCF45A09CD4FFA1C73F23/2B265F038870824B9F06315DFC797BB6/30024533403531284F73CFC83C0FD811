using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace 贪吃蛇.Main
{
    /// <summary>
    /// UI菜单项结构体
    /// </summary>
    public struct MenuItem
    {
        public string Text { get; set; }
        public Action Action { get; set; }
        
        public MenuItem(string text, Action action)
        {
            Text = text;
            Action = action;
        }
    }

    /// <summary>
    /// 场景基类 - 使用模板方法模式
    /// </summary>
    abstract class S_AbstractBaseScene : ISceneUpdate
    {
        protected string _sceneTitle;
        protected List<MenuItem> _menuItems = new List<MenuItem>();
        protected int _curSelected = 0;

        public virtual void Update()
        {
            // 模板方法：定义渲染流程
            RenderTitle();
            RenderContent();
            RenderMenu();
            HandleInput();
        }

        /// <summary>
        /// 渲染标题
        /// </summary>
        protected virtual void RenderTitle()
        {
            Console.ForegroundColor = ConsoleColor.White;
            int titleWidth = UIHelper.GetDisplayWidth(_sceneTitle);
            Console.SetCursorPosition(Game.GlobalWidth / 2 - titleWidth / 2, (int)(Game.GlobalHeight * 0.3));
            Console.WriteLine(_sceneTitle);
        }

        /// <summary>
        /// 渲染主要内容（子类可重写）
        /// </summary>
        protected virtual void RenderContent()
        {
            // 默认什么都不渲染，子类可以重写
        }

        /// <summary>
        /// 渲染菜单
        /// </summary>
        protected virtual void RenderMenu()
        {
            float startY = 0.4f;
            float contentOffset = GetContentOffset(); // 子类可以调整菜单位置
            
            for (int i = 0; i < _menuItems.Count; i++)
            {
                Console.ForegroundColor = _curSelected == i ? ConsoleColor.Red : ConsoleColor.White;
                int textWidth = UIHelper.GetDisplayWidth(_menuItems[i].Text);
                int posY = (int)(Game.GlobalHeight * (startY + contentOffset)) + i * 2;
                Console.SetCursorPosition(Game.GlobalWidth / 2 - textWidth / 2, posY);
                Console.WriteLine(_menuItems[i].Text);
            }
        }

        /// <summary>
        /// 获取内容偏移量，用于调整菜单位置（子类可重写）
        /// </summary>
        protected virtual float GetContentOffset()
        {
            return 0f; // 默认无偏移
        }

        /// <summary>
        /// 处理用户输入
        /// </summary>
        protected virtual void HandleInput()
        {
            switch (Console.ReadKey(true).Key)
            {
                case ConsoleKey.UpArrow:
                    _curSelected--;
                    if (_curSelected < 0) _curSelected = 0;
                    break;
                case ConsoleKey.DownArrow:
                    _curSelected++;
                    if (_curSelected >= _menuItems.Count) _curSelected = _menuItems.Count - 1;
                    break;
                case ConsoleKey.Enter:
                    if (_curSelected < _menuItems.Count)
                        _menuItems[_curSelected].Action?.Invoke();
                    break;
            }
        }

        /// <summary>
        /// 添加菜单项
        /// </summary>
        protected void AddMenuItem(string text, Action action)
        {
            _menuItems.Add(new MenuItem(text, action));
        }

        /// <summary>
        /// 清空菜单项
        /// </summary>
        protected void ClearMenuItems()
        {
            _menuItems.Clear();
        }
    }
}
