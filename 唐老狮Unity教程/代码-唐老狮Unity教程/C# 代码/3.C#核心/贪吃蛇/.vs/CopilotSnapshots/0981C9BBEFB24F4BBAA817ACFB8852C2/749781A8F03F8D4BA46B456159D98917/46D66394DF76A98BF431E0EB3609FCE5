using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using 贪吃蛇.Main.UI;

namespace 贪吃蛇.Main
{
    /// <summary>
    /// 抽象场景基类 - 使用模板方法模式
    /// </summary>
    abstract class S_AbstractBaseScene : ISceneUpdate
    {
        protected List<IUIElement> _uiElements = new List<IUIElement>();
        protected List<ButtonElement> _buttons = new List<ButtonElement>();
        protected int _selectedButtonIndex = 0;

        public virtual void Update()
        {
            RenderUI();
            HandleInput();
        }

        /// <summary>
        /// 渲染UI - 模板方法
        /// </summary>
        private void RenderUI()
        {
            int centerX = Game.GlobalWidth / 2;
            int currentY = (int)(Game.GlobalHeight * 0.3);

            for (int i = 0; i < _uiElements.Count; i++)
            {
                var element = _uiElements[i];
                bool isSelected = false;
                
                // 如果是按钮元素，检查是否被选中
                if (element is ButtonElement button)
                {
                    int buttonIndex = _buttons.IndexOf(button);
                    isSelected = buttonIndex == _selectedButtonIndex;
                }

                element.Render(centerX, currentY, isSelected);
                currentY += element.GetHeight() + 1; // 元素间隔1行
            }
        }

        /// <summary>
        /// 处理输入
        /// </summary>
        private void HandleInput()
        {
            switch (Console.ReadKey(true).Key)
            {
                case ConsoleKey.UpArrow:
                    _selectedButtonIndex = Math.Max(0, _selectedButtonIndex - 1);
                    break;
                case ConsoleKey.DownArrow:
                    _selectedButtonIndex = Math.Min(_buttons.Count - 1, _selectedButtonIndex + 1);
                    break;
                case ConsoleKey.Enter:
                    if (_selectedButtonIndex >= 0 && _selectedButtonIndex < _buttons.Count)
                    {
                        _buttons[_selectedButtonIndex].Execute();
                    }
                    break;
            }
        }

        /// <summary>
        /// 添加UI元素
        /// </summary>
        protected void AddUIElement(IUIElement element)
        {
            _uiElements.Add(element);
            if (element is ButtonElement button)
            {
                _buttons.Add(button);
            }
        }

        /// <summary>
        /// 子类必须实现此方法来初始化UI元素
        /// </summary>
        protected abstract void InitializeUI();

        /// <summary>
        /// 构造函数中调用初始化
        /// </summary>
        protected S_AbstractBaseScene()
        {
            InitializeUI();
        }
    }
}
